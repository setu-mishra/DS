#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node *next;
};

// Function to create a new node
struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    if (newNode == NULL) {
        printf("Memory allocation failed\n");
        exit(1);
    }
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

// Function to insert a node at the end of the linked list
void insertEnd(struct Node **head, int data) {
    struct Node *newNode = createNode(data);
    if (*head == NULL) {
        *head = newNode;
        return;
    }
    struct Node *temp = *head;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = newNode;
}

// Function to display the linked list
void display(struct Node *head) {
    if (head == NULL) {
        printf("Linked list is empty\n");
        return;
    }
    struct Node *temp = head;
    while (temp != NULL) {
        printf("%d -> ", temp->data);
        temp = temp->next;
    }
    printf("NULL\n");
}

// Function to sort the linked list in ascending order
void sortLinkedList(struct Node **head) {
    if (*head == NULL || (*head)->next == NULL)
        return;

    struct Node *current = *head;
    struct Node *index = NULL;
    int temp;

    while (current != NULL) {
        index = current->next;
        while (index != NULL) {
            if (current->data > index->data) {
                temp = current->data;
                current->data = index->data;
                index->data = temp;
            }
            index = index->next;
        }
        current = current->next;
    }
}

// Function to reverse the linked list
void reverseLinkedList(struct Node **head) {
    struct Node *prev = NULL;
    struct Node *current = *head;
    struct Node *next = NULL;

    while (current != NULL) {
        next = current->next;
        current->next = prev;
        prev = current;
        current = next;
    }
    *head = prev;
}

// Function to concatenate two linked lists
void concatenateLinkedLists(struct Node **head1, struct Node *head2) {
    if (*head1 == NULL) {
        *head1 = head2;
        return;
    }
    struct Node *temp = *head1;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = head2;
}

int main() {
    struct Node *list1 = NULL;
    struct Node *list2 = NULL;
    int n, data;

    printf("Enter the number of elements for the first linked list: ");
    scanf("%d", &n);
    printf("Enter the elements for the first linked list:\n");
    for (int i = 0; i < n; i++) {
        scanf("%d", &data);
        insertEnd(&list1, data);
    }

    printf("Enter the number of elements for the second linked list: ");
    scanf("%d", &n);
    printf("Enter the elements for the second linked list:\n");
    for (int i = 0; i < n; i++) {
        scanf("%d", &data);
        insertEnd(&list2, data);
    }

    printf("First linked list: ");
    display(list1);
    printf("Second linked list: ");
    display(list2);

    // Sorting first linked list
    sortLinkedList(&list1);
    printf("First linked list after sorting: ");
    display(list1);

    // Reversing second linked list
    reverseLinkedList(&list2);
    printf("Second linked list after reversing: ");
    display(list2);

    // Concatenating two linked lists
    concatenateLinkedLists(&list1, list2);
    printf("Concatenated linked list: ");
    display(list1);

    return 0;
}
